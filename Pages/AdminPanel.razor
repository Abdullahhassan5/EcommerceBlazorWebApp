@page "/admin"
@using ECommerceWebApp.Models
@using ECommerceWebApp.Components
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Admin Panel</h3>

@if (isLoggedIn)
{
    <button class="btn btn-primary mb-3" @onclick="AddNewProduct">Add Product</button>

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.Price</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => EditProduct(product)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <ProductModal @ref="ProductModal" OnSave="LoadProducts" />
}
else
{
    <div class="alert alert-danger">
        <h4>Unauthorized Access</h4>
        <p>Please log in as an admin to access this page.</p>
    </div>
}

@code {
    private List<Product> products = new();
    private ProductModal ProductModal { get; set; } = default!;
    private bool isLoggedIn = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckAdminLogin();

        if (!isLoggedIn)
        {
            Navigation.NavigateTo("/login"); // Redirect to login page if not logged in
        }
        else
        {
            await LoadProducts();
        }
    }

    private async Task CheckAdminLogin()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7102/api/Auth/check");
            request.Headers.Add("username", "admin");
            request.Headers.Add("password", "admin");

            var response = await Http.SendAsync(request);
            isLoggedIn = response.IsSuccessStatusCode;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during login check: {ex.Message}");
            isLoggedIn = false;
        }
    }

    private async Task LoadProducts()
    {
        try
        {
            products = await Http.GetFromJsonAsync<List<Product>>("https://localhost:7102/api/Products");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
    }

    private void AddNewProduct()
    {
        var newProduct = new Product();
        ProductModal.ShowModal(newProduct, "Add Product");
    }

    private void EditProduct(Product product)
    {
        ProductModal.ShowModal(product, "Edit Product");
    }

    private async Task DeleteProduct(int id)
    {
        try
        {
            await Http.DeleteAsync($"https://localhost:7102/api/Products/{id}");
            await LoadProducts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting product: {ex.Message}");
        }
    }
}
